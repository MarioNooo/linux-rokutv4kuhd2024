/* SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause) */
/*
 * Copyright (c) 2021 MediaTek Inc.
 */

#ifndef MTK_DMX_PM_H
#define MTK_DMX_PM_H

#include <linux/clk.h>
#include <linux/pm_runtime.h>
#include <linux/firmware.h>

#define SWEN_WIDTH		(0x100)
#define SWEN_MASK		(0xF00)
#define SWEN_LINE		(4)
#define SWEN_START(__N)	(SWEN_WIDTH * __N)

typedef enum {
	// always on
	MTK_DMX_SWEN_MIN_0 = SWEN_START(0),
	MTK_DMX_SWEN_MCU_NONPM2TSP = MTK_DMX_SWEN_MIN_0,
	MTK_DMX_SWEN_SMI_TSP2TSP,
	MTK_DMX_SWEN_TSP2TSP,
	MTK_DMX_SWEN_MAX_0,
	// tsp
	MTK_DMX_SWEN_MIN_1 = SWEN_START(1),
	MTK_DMX_SWEN_TSP2DSCRMB = MTK_DMX_SWEN_MIN_1,
	MTK_DMX_SWEN_TS02TSP,
	MTK_DMX_SWEN_TS12TSP,
	MTK_DMX_SWEN_TS22TSP,
	MTK_DMX_SWEN_TSFI2TSP,
	MTK_DMX_SWEN_TSIF0_27M2TSP,
	MTK_DMX_SWEN_FIQ0_27M2TSP,
	MTK_DMX_SWEN_MM0_27M2TSP,
	MTK_DMX_SWEN_MM1_27M2TSP,
	MTK_DMX_SWEN_IMI2TSP,
	MTK_DMX_SWEN_SMI2TSP,
	MTK_DMX_SWEN_STAMP2TSP,
	MTK_DMX_SWEN_MAX_1,
	// ts sample
	MTK_DMX_SWEN_MIN_2 = SWEN_START(2),
	MTK_DMX_SWEN_TS_SAMPLE2TS_SAMPLE = MTK_DMX_SWEN_MIN_2,
	MTK_DMX_SWEN_TS0_IN_DFT2TS_SAMPLE,
	MTK_DMX_SWEN_TS1_IN_DFT2TS_SAMPLE,
	MTK_DMX_SWEN_TS2_IN_DFT2TS_SAMPLE,
	MTK_DMX_SWEN_MAX_2,
	// path
	MTK_DMX_SWEN_MIN_3 = SWEN_START(3),
	MTK_DMX_SWEN_PATH0_27M2TSP = MTK_DMX_SWEN_MIN_3,
	MTK_DMX_SWEN_PATH1_27M2TSP,
	MTK_DMX_SWEN_PATH2_27M2TSP,
	MTK_DMX_SWEN_PATH_FI_27M2TSP,
	MTK_DMX_SWEN_MAX_3,
	// parser
	MTK_DMX_SWEN_MIN_4 = SWEN_START(4),
	MTK_DMX_SWEN_PARSER2TSP = MTK_DMX_SWEN_MIN_4,
	MTK_DMX_SWEN_PARSER2VD_PES_PARSER,
	MTK_DMX_SWEN_SMI2VD_PES_PARSER,
	MTK_DMX_SWEN_VIVA_PARSER2PARSER,
	MTK_DMX_SWEN_MAX_4,
	// stc
	MTK_DMX_SWEN_MIN_5 = SWEN_START(5),
	MTK_DMX_SWEN_SYN_STC02TS_SAMPLE = MTK_DMX_SWEN_MIN_5,
	MTK_DMX_SWEN_SYN_STC12TS_SAMPLE,
	MTK_DMX_SWEN_SYN_STC22TS_SAMPLE,
	MTK_DMX_SWEN_SYN_STC32TS_SAMPLE,
	MTK_DMX_SWEN_SYS_TIME0_27M2TSP,
	MTK_DMX_SWEN_SYS_TIME1_27M2TSP,
	MTK_DMX_SWEN_SYS_TIME2_27M2TSP,
	MTK_DMX_SWEN_SYS_TIME3_27M2TSP,
	MTK_DMX_SWEN_MAX_5,
	// pvr
	MTK_DMX_SWEN_MIN_6 = SWEN_START(6),
	MTK_DMX_SWEN_PVR1_27M2TSP = MTK_DMX_SWEN_MIN_6,
	MTK_DMX_SWEN_PVR2_27M2TSP,
	MTK_DMX_SWEN_PVR3_27M2TSP,
	MTK_DMX_SWEN_PVR4_27M2TSP,
	MTK_DMX_SWEN_MAX_6,
	// tlv
	MTK_DMX_SWEN_MIN_7 = SWEN_START(7),
	MTK_DMX_SWEN_TS_TLV02TSP = MTK_DMX_SWEN_MIN_7,
	MTK_DMX_SWEN_TS_TLV12TSP,
	MTK_DMX_SWEN_TS_TLV22TSP,
	MTK_DMX_SWEN_TLV0_27M2TSP,
	MTK_DMX_SWEN_TLV1_27M2TSP,
	MTK_DMX_SWEN_TLV2_27M2TSP,
	MTK_DMX_SWEN_MAX_7,
	// alp
	MTK_DMX_SWEN_MIN_8 = SWEN_START(8),
	MTK_DMX_SWEN_TS_ALP02TSP = MTK_DMX_SWEN_MIN_8,
	MTK_DMX_SWEN_TS_ALP12TSP,
	MTK_DMX_SWEN_MAX_8,
	// tso
	MTK_DMX_SWEN_MIN_9 = SWEN_START(9),
	MTK_DMX_SWEN_TSP2TSO = MTK_DMX_SWEN_MIN_9,
	MTK_DMX_SWEN_TSP2TSO2,
	MTK_DMX_SWEN_SMI2TSO,
	MTK_DMX_SWEN_SMI2TSO2,
	MTK_DMX_SWEN_STAMP2TSO,
	MTK_DMX_SWEN_STAMP2TSO2,
	MTK_DMX_SWEN_TSO_CH1_27M2TSO,
	MTK_DMX_SWEN_TSO_CH12TSO,
	MTK_DMX_SWEN_TSO_CH5_27M2TSO,
	MTK_DMX_SWEN_TSO_CH52TSO,
	MTK_DMX_SWEN_TSO_CH6_27M2TSO,
	MTK_DMX_SWEN_TSO_CH62TSO,
	MTK_DMX_SWEN_TSO_OUT_DIV_MN_SRC2TS_SAMPLE,
	MTK_DMX_SWEN_TSO_OUT2TSO,
	MTK_DMX_SWEN_TSO_S2P12TSO,
	MTK_DMX_SWEN_TSO_S2P22TSO,
	MTK_DMX_SWEN_TSO_TRACE_IN2TSO,
	MTK_DMX_SWEN_TSO_TRACE2TSO,
	MTK_DMX_SWEN_TSO2_CH1_27M2TSO2,
	MTK_DMX_SWEN_TSO2_CH12TSO2,
	MTK_DMX_SWEN_TSO2_CH5_27M2TSO2,
	MTK_DMX_SWEN_TSO2_CH52TSO2,
	MTK_DMX_SWEN_TSO2_CH6_27M2TSO2,
	MTK_DMX_SWEN_TSO2_CH62TSO2,
	MTK_DMX_SWEN_TSO2_OUT_DIV_MN_SRC2TS_SAMPLE,
	MTK_DMX_SWEN_TSO2_OUT2TSO2,
	MTK_DMX_SWEN_TSO2_S2P12TSO2,
	MTK_DMX_SWEN_TSO2_S2P22TSO2,
	MTK_DMX_SWEN_TSO2_TRACE_IN2TSO2,
	MTK_DMX_SWEN_TSO2_TRACE2TSO2,
	MTK_DMX_SWEN_MAX_9,
	// cilink
	MTK_DMX_SWEN_MIN_10 = SWEN_START(10),
	MTK_DMX_SWEN_CILINK_IF2CILINK = MTK_DMX_SWEN_MIN_10,
	MTK_DMX_SWEN_CILINK_2B_RX2CILINK,
	MTK_DMX_SWEN_CILINK_2B_TX2CILINK,
	MTK_DMX_SWEN_TS_TX_C12CILINK,
	MTK_DMX_SWEN_TS_TX_C22CILINK,
	MTK_DMX_SWEN_MAX_10,
} mtk_tsp_swen;

#define SWEN_TOTAL \
	((MTK_DMX_SWEN_MAX_0  - MTK_DMX_SWEN_MIN_0) + \
	 (MTK_DMX_SWEN_MAX_1  - MTK_DMX_SWEN_MIN_1) + \
	 (MTK_DMX_SWEN_MAX_2  - MTK_DMX_SWEN_MIN_2) + \
	 (MTK_DMX_SWEN_MAX_3  - MTK_DMX_SWEN_MIN_3) + \
	 (MTK_DMX_SWEN_MAX_4  - MTK_DMX_SWEN_MIN_4) + \
	 (MTK_DMX_SWEN_MAX_5  - MTK_DMX_SWEN_MIN_5) + \
	 (MTK_DMX_SWEN_MAX_6  - MTK_DMX_SWEN_MIN_6) + \
	 (MTK_DMX_SWEN_MAX_7  - MTK_DMX_SWEN_MIN_7) + \
	 (MTK_DMX_SWEN_MAX_8  - MTK_DMX_SWEN_MIN_8) + \
	 (MTK_DMX_SWEN_MAX_9  - MTK_DMX_SWEN_MIN_9) + \
	 (MTK_DMX_SWEN_MAX_10 - MTK_DMX_SWEN_MIN_10))

const static int swen_step[] = {
	(MTK_DMX_SWEN_MAX_0 - MTK_DMX_SWEN_MIN_0),
	(MTK_DMX_SWEN_MAX_1 - MTK_DMX_SWEN_MIN_1),
	(MTK_DMX_SWEN_MAX_2 - MTK_DMX_SWEN_MIN_2),
	(MTK_DMX_SWEN_MAX_3 - MTK_DMX_SWEN_MIN_3),
	(MTK_DMX_SWEN_MAX_4 - MTK_DMX_SWEN_MIN_4),
	(MTK_DMX_SWEN_MAX_5 - MTK_DMX_SWEN_MIN_5),
	(MTK_DMX_SWEN_MAX_6 - MTK_DMX_SWEN_MIN_6),
	(MTK_DMX_SWEN_MAX_7 - MTK_DMX_SWEN_MIN_7),
	(MTK_DMX_SWEN_MAX_8 - MTK_DMX_SWEN_MIN_8),
	(MTK_DMX_SWEN_MAX_9 - MTK_DMX_SWEN_MIN_9),
};

const static int swen_min[] = {
	MTK_DMX_SWEN_MIN_0,
	MTK_DMX_SWEN_MIN_1,
	MTK_DMX_SWEN_MIN_2,
	MTK_DMX_SWEN_MIN_3,
	MTK_DMX_SWEN_MIN_4,
	MTK_DMX_SWEN_MIN_5,
	MTK_DMX_SWEN_MIN_6,
	MTK_DMX_SWEN_MIN_7,
	MTK_DMX_SWEN_MIN_8,
	MTK_DMX_SWEN_MIN_9,
	MTK_DMX_SWEN_MIN_10,
};

static int swen_base[ARRAY_SIZE(swen_min)] = { 0 };

struct mtk_dmx_swen {
	mtk_tsp_swen swen;
	u32 offset, start, end;
};

struct mtk_dmx_pm {
	bool bRpmEn;
	bool suspend_dbg_en;
	bool on;
	struct clk *tsp_clk;
	struct clk *parser_clk;
	struct clk *vivaldi9_parser_clk;
	struct clk *top_mg_smi_ck;
	struct clk *tsp_smi_tsp;
	struct clk *timestamp_clk;
	struct clk **stc_synth_clk;
	struct clk **stc_clk;
	// swen
	u32 swen_cnt;
	struct mtk_dmx_swen *swen_list;
	int swen2index[SWEN_TOTAL];
};

typedef enum {
	MTK_DMX_PM_STATUS_SUSPEND = 0,
	MTK_DMX_PM_STATUS_RESUME,
	MTK_DMX_PM_STATUS_IDLE,
} mtk_dmx_pm_status;

int mtk_dmx_pm_init(struct mtk_dmx_pm *pm, bool bInitSW);
int mtk_dmx_pm_exit(struct mtk_dmx_pm *pm);

//suspend to ram
int mtk_dmx_pm_suspend(bool suspend, void *parg);

int mtk_dmx_pm_open(struct mtk_dmx_pm *pm);
int mtk_dmx_pm_close(struct mtk_dmx_pm *pm);

int mtk_dmx_pm_runtime(struct mtk_dmx_pm *pm, mtk_dmx_pm_status eStatus, bool runtime_ops);

#ifdef DMX2LITE
int mtk_dmx_pm_set_stc_clk(struct mtk_dmx_pm *pm, int id, int rate);
#endif

static void mtk_dmx_pm_swen_set_base(void)
{
	int i, t = 0;
	swen_base[0] = 0;
	for (i = 1; i < ARRAY_SIZE(swen_base); i++) {
		t += swen_step[i - 1];
		swen_base[i] = t;
	}
};

static int mtk_dmx_pm_swen_get_offset(mtk_tsp_swen en)
{
	int t = ((en & SWEN_MASK) >> 8);
	return en - swen_min[t] + swen_base[t];
};

#endif	/* MTK_DMX_PM_H */
